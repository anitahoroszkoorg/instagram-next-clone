generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String    @id @default(uuid()) // UUID as primary key
  username      String    @unique
  email         String    @unique
  password_hash String
  full_name     String
  bio           String?
  created_at    DateTime  @default(now())
  is_active     Boolean   @default(false)
  profile_picture Bytes?
  public        String    @default("not public")

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  follows       Follow[] @relation("Following")
  followers     Follow[] @relation("Followers")
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]

  @@map("user")
}

model Post {
  post_id    String   @id @default(uuid()) // UUID for post ID
  user_id    String
  caption    String
  image      Bytes?  // Use String? if storing URLs
  created_at DateTime @default(now())

  // Relations
  user        User        @relation(fields: [user_id], references: [user_id])
  comments    Comment[]   
  likes       Like[]
  notifications Notification[]

  @@map("post")
}

model Comment {
  comment_id   String   @id @default(uuid())
  user_id      String
  post_id      String
  comment_text String
  created_at   DateTime @default(now())

  // Relations
  user         User   @relation(fields: [user_id], references: [user_id])
  post         Post   @relation(fields: [post_id], references: [post_id], onDelete: Cascade) 
  notifications Notification[]

  @@map("comment")
}


model Like {
  like_id    String   @id @default(uuid())
  user_id    String
  post_id    String
  created_at DateTime @default(now())

  // Relations
  user       User    @relation(fields: [user_id], references: [user_id])
  post       Post    @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  notifications Notification[]

  @@map("like")
}

model Follow {
  follow_id         String   @id @default(uuid())
  following_user_id String
  followed_user_id  String
  created_at        DateTime @default(now())

  // Relations
  follower   User @relation("Following", fields: [following_user_id], references: [user_id])
  followed   User @relation("Followers", fields: [followed_user_id], references: [user_id])

  @@map("follow")
}

model Message {
  message_id   String   @id @default(uuid())
  sender_id    String
  receiver_id  String
  message_text String
  created_at   DateTime @default(now())
  read_status  Boolean  @default(false)

  // Relations
  sender    User @relation("SentMessages", fields: [sender_id], references: [user_id])
  receiver  User @relation("ReceivedMessages", fields: [receiver_id], references: [user_id])

  @@map("message")
}

model Notification {
  notification_id String   @id @default(uuid())
  user_id         String
  like_id         String?  // Can be linked to a "like" or "comment"
  comment_id      String?
  post_id         String?
  created_at      DateTime @default(now())
  is_read         Boolean  @default(false)

  // Relations
  user       User   @relation(fields: [user_id], references: [user_id])
  like       Like?  @relation(fields: [like_id], references: [like_id])
  comment    Comment? @relation(fields: [comment_id], references: [comment_id])
  post       Post?  @relation(fields: [post_id], references: [post_id])

  @@map("notification")
}