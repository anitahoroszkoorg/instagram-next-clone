generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  comment_id        Int             @id @default(autoincrement())
  instagram_user_id Int?
  post_id           Int?
  comment_text      String?         @db.VarChar(100)
  created_at        DateTime?       @default(now()) @db.Timestamp(6)
  instagram_user    instagram_user? @relation(fields: [instagram_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  post              post?           @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
}

model follower {
  follower_id                                                         Int             @id @default(autoincrement())
  follower_instagram_user_id                                          Int?
  following_instagram_user_id                                         Int?
  created_at                                                          DateTime?       @default(now()) @db.Timestamp(6)
  instagram_user_follower_follower_instagram_user_idToinstagram_user  instagram_user? @relation("follower_follower_instagram_user_idToinstagram_user", fields: [follower_instagram_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  instagram_user_follower_following_instagram_user_idToinstagram_user instagram_user? @relation("follower_following_instagram_user_idToinstagram_user", fields: [following_instagram_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([follower_instagram_user_id, following_instagram_user_id], map: "unique_follow")
}

model instagram_like {
  like_id           Int             @id @default(autoincrement())
  instagram_user_id Int?
  post_id           Int?
  created_at        DateTime?       @default(now()) @db.Timestamp(6)
  instagram_user    instagram_user? @relation(fields: [instagram_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  post              post?           @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
}

model instagram_user {
  user_id                                                       Int              @id @default(autoincrement())
  username                                                      String           @unique @db.VarChar(50)
  email                                                         String           @unique @db.VarChar(100)
  password_hash                                                 String           @db.VarChar(100)
  full_name                                                     String           @db.VarChar(100)
  bio                                                           String?          @db.VarChar(255)
  profile_image_url                                             String?          @db.VarChar(100)
  created_at                                                    DateTime?        @default(now()) @db.Timestamp(6)
  is_active                                                     Boolean          @default(false)
  custom_id                                                     String?          @unique @db.VarChar(255)
  comment                                                       comment[]
  follower_follower_follower_instagram_user_idToinstagram_user  follower[]       @relation("follower_follower_instagram_user_idToinstagram_user")
  follower_follower_following_instagram_user_idToinstagram_user follower[]       @relation("follower_following_instagram_user_idToinstagram_user")
  instagram_like                                                instagram_like[]
  post                                                          post[]
}

model post {
  post_id           Int              @id @default(autoincrement())
  instagram_user_id Int?
  caption           String?          @db.VarChar(255)
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  image             Bytes?
  comment           comment[]
  instagram_like    instagram_like[]
  instagram_user    instagram_user?  @relation(fields: [instagram_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
